(()=>{const t=r=>{if(0===r.length)return!1;if(1===r.length)return r;const e=Math.round(r.length/2),l=r.slice(0,e),n=r.slice(e);return((t,r)=>{const e=[];let l=0,n=0;for(;l<t.length&&n<r.length;)t[l]<r[n]?e.push(t[l++]):e.push(r[n++]);for(;l<t.length;)e.push(t[l]),l++;for(;n<r.length;)e.push(r[n]),n++;return e})(t(l),t(n))},r=new class{constructor(){this.root=null}buildTree(t,r=0,e=t.length-1){if(r>e)return null;const l=parseInt((r+e)/2,10);return new class{constructor(t,r,e){this.data=t,this.left=r,this.right=e}}(t[l],this.buildTree(t,r,l-1),this.buildTree(t,l+1,e))}prettyPrint(t,r="",e=!0){null!==t.right&&this.prettyPrint(t.right,`${r}${e?"│   ":"    "}`,!1),console.log(`${r}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&this.prettyPrint(t.left,`${r}${e?"    ":"│   "}`,!0)}preOrder(t){null!=t&&(console.log(`${t.data}`),this.preOrder(t.left),this.preOrder(t.right))}inOrder(t){null!=t&&(this.preOrder(t.left),console.log(`${t.data}`),this.preOrder(t.right))}postOrder(t){null!=t&&(this.preOrder(t.left),this.preOrder(t.right),console.log(`${t.data}`))}sort(r){const e=[...new Set(r)];return t(e)}},e=r.sort([1,7,4,8,4,3,5,7,9,2,6]),l=r.buildTree(e);r.prettyPrint(l),console.log(l),r.inOrder(l)})();
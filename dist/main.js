(()=>{"use strict";const t=r=>{if(0===r.length)return!1;if(1===r.length)return r;const e=Math.round(r.length/2),i=r.slice(0,e),l=r.slice(e);return((t,r)=>{const e=[];let i=0,l=0;for(;i<t.length&&l<r.length;)t[i]<r[l]?e.push(t[i++]):e.push(r[l++]);for(;i<t.length;)e.push(t[i]),i+=1;for(;l<r.length;)e.push(r[l]),l+=1;return e})(t(i),t(l))},r=t,e=class{constructor(t){this.data=t,this.left=null,this.right=null}},i=new class{constructor(){this.root=null}buildTree(t,r=0,i=t.length-1){if(r>i)return null;const l=parseInt((r+i)/2,10),n=new e(t[l]);return n.left=this.buildTree(t,r,l-1),n.right=this.buildTree(t,l+1,i),this.root=n,n}prettyPrint(t=this.root,r="",e=!0){null!==t.right&&this.prettyPrint(t.right,`${r}${e?"│   ":"    "}`,!1),console.log(`${r}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&this.prettyPrint(t.left,`${r}${e?"    ":"│   "}`,!0)}insert(t,r=this.root){return null===r?new e(t):r.data!==t&&(r.data<t?r.right=this.insert(t,r.right):r.left=this.insert(t,r.left),r)}remove(t,r=this.root){if(null===r)return r;if(r.data<t?r.right=this.remove(t,r.right):r.left=this.remove(t,r.left),r.data===t){if(null===r.left&&null===r.right)return null;if(null===r.left)return r.right;if(null===r.right)return r.left;r.data=this.minValue(r.right),r.right=this.remove(r.data,r.right)}return r}minValue(t){return null===t.left?t.data:t=this.minValue(t.left)}levelOrder(){const t=[this.root],r=[];for(;t.length>0;){const e=t.shift();r.push(e.data);const i=[e.left,e.right].filter((t=>t));t.push(...i)}return r}preOrder(t=this.root){null!==t&&(console.log(`${t.data}`),this.preOrder(t.left),this.preOrder(t.right))}inOrder(t=this.root){null!==t&&(this.inOrder(t.left),console.log(`${t.data}`),this.inOrder(t.right))}postOrder(t=this.root){null!==t&&(this.postOrder(t.left),this.postOrder(t.right),console.log(`${t.data}`))}sort(t){const e=[...new Set(t)];return r(e)}find(t,r=this.root){return null===r?r:r.data===t?console.log(r):(r.data<t?r.right=this.find(t,r.right):r.left=this.find(t,r.left),r)}findHeight(t=this.root){return null===t?-1:Math.max(this.findHeight(t.left),this.findHeight(t.right))+1}findDepth(t=this.root){return null===t?0:Math.max(this.findDepth(t.left),this.findDepth(t.right))+1}isBalanced(t=this.root.left,r=this.root.right){return this.findHeight(t)-this.findHeight(r)<=1||this.reBalance()}reBalance(){const t=this.levelOrder(),r=this.sort(t);this.buildTree(r)}},l=i.sort([68,36,80,90,34,59,50,2,71,65,18,23,76,38,68,47,61,57,62,24,1,83,41,60,89,28,34,9,94,18]);i.buildTree(l),i.prettyPrint(),i.insert(51),i.insert(52),i.insert(53),i.insert(0),console.log(i.isBalanced()),i.prettyPrint(),console.log(i.findHeight()),console.log(i.findDepth()),console.log(i.isBalanced())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQVVzQyxHQUNyQnhDLEVBQVdRLGNBQ1hSLEVBQVdhLE9BQU8sSUFDbEJiLEVBQVdhLE9BQU8sSUFDbEJiLEVBQVdhLE9BQU8sSUFDbEJiLEVBQVdhLE9BQU8sR0FFbEJGLFFBQVFDLElBQUlaLEVBQVdrQyxjQUN2QmxDLEVBQVdRLGNBTVhHLFFBQVFDLElBQUlaLEVBQVcrQixjQUN2QnBCLFFBQVFDLElBQUlaLEVBQVdpQyxhQUN2QnRCLFFBQVFDLElBQUlaLEVBQVdrQyxhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmluYXJ5c2VhcmNodHJlZS8uL3NyYy9tZXJnZVNvcnQuanMiLCJ3ZWJwYWNrOi8vYmluYXJ5c2VhcmNodHJlZS8uL3NyYy9ub2RlLmpzIiwid2VicGFjazovL2JpbmFyeXNlYXJjaHRyZWUvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbWVyZ2UgPSAoZmlyc3RIYWxmLCBzZWNvbmRIYWxmKT0+e1xyXG4gICAgY29uc3QgbWVyZ2VkQXJyYXkgPSBbXTtcclxuXHJcbiAgICBsZXQgaT0wO1xyXG4gICAgbGV0IGo9MDtcclxuICAgIHdoaWxlKGkgPCBmaXJzdEhhbGYubGVuZ3RoICYmIGogPCBzZWNvbmRIYWxmLmxlbmd0aCl7XHJcbiAgICAgICAgKGZpcnN0SGFsZltpXSA8IHNlY29uZEhhbGZbal0pID8gbWVyZ2VkQXJyYXkucHVzaChmaXJzdEhhbGZbaSsrXSkgXHJcbiAgICAgICAgOiBtZXJnZWRBcnJheS5wdXNoKHNlY29uZEhhbGZbaisrXSlcclxuICAgIH1cclxuICAgIHdoaWxlKGkgPCBmaXJzdEhhbGYubGVuZ3RoKXtcclxuICAgICAgICBtZXJnZWRBcnJheS5wdXNoKGZpcnN0SGFsZltpXSk7XHJcbiAgICAgICAgaSs9MTtcclxuICAgIH1cclxuXHJcbiAgICB3aGlsZShqIDwgc2Vjb25kSGFsZi5sZW5ndGgpe1xyXG4gICAgICAgIG1lcmdlZEFycmF5LnB1c2goc2Vjb25kSGFsZltqXSk7XHJcbiAgICAgICAgais9MTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhtZXJnZWRBcnJheSk7XHJcbiAgICByZXR1cm4gbWVyZ2VkQXJyYXk7XHJcblxyXG59XHJcblxyXG5jb25zdCBtZXJnZVNvcnQgPSAoc29tZUFycmF5KT0+e1xyXG4gICAgaWYoc29tZUFycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYoc29tZUFycmF5Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIHNvbWVBcnJheTtcclxuXHJcbiAgICBjb25zdCBtaWQgPSBNYXRoLnJvdW5kKHNvbWVBcnJheS5sZW5ndGgvMik7XHJcbiAgICBjb25zdCBmaXJzdEhhbGYgPSBzb21lQXJyYXkuc2xpY2UoMCwgbWlkKVxyXG4gICAgY29uc3Qgc2Vjb25kSGFsZiA9IHNvbWVBcnJheS5zbGljZShtaWQpO1xyXG5cclxuICAgIHJldHVybiBtZXJnZShtZXJnZVNvcnQoZmlyc3RIYWxmKSwgbWVyZ2VTb3J0KHNlY29uZEhhbGYpKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWVyZ2VTb3J0IiwiY29uc3QgTm9kZSA9IGNsYXNze1xyXG5cdGNvbnN0cnVjdG9yKGRhdGEpXHJcblx0e1xyXG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcclxuXHRcdHRoaXMubGVmdCA9IG51bGw7XHJcblx0XHR0aGlzLnJpZ2h0ID0gbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5vZGUiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXHJcbmltcG9ydCBtZXJnZVNvcnQgZnJvbSBcIi4vbWVyZ2VTb3J0XCI7XHJcbmltcG9ydCBOb2RlIGZyb20gXCIuL25vZGVcIjtcclxuXHJcbmNvbnN0IFRyZWUgPSBjbGFzc3tcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5yb290ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBidWlsZFRyZWUoYXJyLCBzdGFydCA9IDAgLCBlbmQgPSBhcnIubGVuZ3RoLTEpey8vIGNyZWF0ZXMgYW5kIGJyYW5jaGVzIG5vZGUgYW5kIHJldHVybnMgdGhlIG1haW4gbm9kZVxyXG4gICAgICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIG51bGw7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBtaWQgPSBwYXJzZUludCgoc3RhcnQgKyBlbmQpIC8gMiwgMTApO1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTm9kZShhcnJbbWlkXSk7XHJcbiAgICAgICAgbm9kZS5sZWZ0ID0gdGhpcy5idWlsZFRyZWUoYXJyLCBzdGFydCwgbWlkIC0gMSk7XHJcbiAgICAgICAgbm9kZS5yaWdodCA9IHRoaXMuYnVpbGRUcmVlKGFyciwgbWlkICsgMSwgZW5kKTtcclxuICAgICAgICB0aGlzLnJvb3QgPSBub2RlO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHByZXR0eVByaW50KG5vZGUgPSB0aGlzLnJvb3QsIHByZWZpeCA9IFwiXCIsIGlzTGVmdCA9IHRydWUpey8vIHZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiB0aHIgYmluYXJ5IHRyZWVcclxuICAgICAgICBpZiAobm9kZS5yaWdodCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgdGhpcy5wcmV0dHlQcmludChub2RlLnJpZ2h0LCBgJHtwcmVmaXh9JHtpc0xlZnQgPyBcIuKUgiAgIFwiIDogXCIgICAgXCJ9YCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhgJHtwcmVmaXh9JHtpc0xlZnQgPyBcIuKUlOKUgOKUgCBcIiA6IFwi4pSM4pSA4pSAIFwifSR7bm9kZS5kYXRhfWApO1xyXG4gICAgICAgIGlmIChub2RlLmxlZnQgIT09IG51bGwpIHtcclxuICAgICAgICAgIHRoaXMucHJldHR5UHJpbnQobm9kZS5sZWZ0LCBgJHtwcmVmaXh9JHtpc0xlZnQgPyBcIiAgICBcIiA6IFwi4pSCICAgXCJ9YCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluc2VydChkYXRhLCBjdXJyZW50Tm9kZSA9IHRoaXMucm9vdCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIG5ldyBOb2RlKGRhdGEpOy8vIGNyZWF0ZXMgbmV3IG5vZGUgYXQgdGhlIGVuZFxyXG4gICAgICAgIGlmIChjdXJyZW50Tm9kZS5kYXRhID09PSBkYXRhKSByZXR1cm4gZmFsc2U7Ly8gbm8gZHVwZXNcclxuICAgIFxyXG4gICAgICAgIGlmIChjdXJyZW50Tm9kZS5kYXRhIDwgZGF0YSkgey8vIG5ld0RhdGEgZ3JlYXRlciB0aGFuIGN1cnJlbnQgbm9kZURhdGEgdGhlbiBub2RlIGNoYW5nZXMgdG8gbm9kZSdzIHJpZ2h0IHNpZGVcclxuICAgICAgICAgIGN1cnJlbnROb2RlLnJpZ2h0ID0gdGhpcy5pbnNlcnQoZGF0YSwgY3VycmVudE5vZGUucmlnaHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjdXJyZW50Tm9kZS5sZWZ0ID0gdGhpcy5pbnNlcnQoZGF0YSwgY3VycmVudE5vZGUubGVmdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmUoZGF0YSwgY3VycmVudE5vZGUgPSB0aGlzLnJvb3Qpe1xyXG4gICAgICAgIGlmKGN1cnJlbnROb2RlID09PSBudWxsKSByZXR1cm4gY3VycmVudE5vZGU7XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50Tm9kZS5kYXRhIDwgZGF0YSkgey8vIGNvbXBhcmluZyB0aGUgcmVtb3ZlZCBkYXRhIGluIHRoZSB0cmVlIGFuZCBmaW5kaW5nIGl0cyBwb3NpdGlvblxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5yaWdodCA9IHRoaXMucmVtb3ZlKGRhdGEsIGN1cnJlbnROb2RlLnJpZ2h0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5sZWZ0ID0gdGhpcy5yZW1vdmUoZGF0YSwgY3VycmVudE5vZGUubGVmdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihjdXJyZW50Tm9kZS5kYXRhID09PSBkYXRhKXsvLyBkYXRhIG1hdGhjZXMgaW4gdHJlZVxyXG4gICAgICAgICAgICBpZihjdXJyZW50Tm9kZS5sZWZ0PT09bnVsbCAmJiBjdXJyZW50Tm9kZS5yaWdodCA9PT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsvLyByZW1vdmVzIHRoZSBsZWFmIG9mIHRoZSB0cmVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY3VycmVudE5vZGUubGVmdCA9PT0gbnVsbCl7Ly8gaWYgaGFzIG9uZSBjaGlsZCBtYWtlcyB0aGUgY2hpbGQgdGhlIHBhcmVudFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnROb2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGN1cnJlbnROb2RlLnJpZ2h0ID09PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Tm9kZS5sZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGZvciBhIHBhcmVudCBoYXZpbmcgYm90aCBjaGlsZHJlblxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5kYXRhID0gIHRoaXMubWluVmFsdWUoY3VycmVudE5vZGUucmlnaHQpOy8vIGNoYW5nZXMgdGhlIHJlbW92ZWQgbm9kZURhdGEgdG8gdGhlIG5leHQgYmlnZ2VzdCBudW1iZXJcclxuICAgICAgICAgICAgLy8gcmVtb3ZpbmcgdGhlIHN1Y2Vzc29yIGFmdGVyIHJlcGxhY2VtZW50XHJcbiAgICAgICAgICAgIGN1cnJlbnROb2RlLnJpZ2h0ID0gdGhpcy5yZW1vdmUoY3VycmVudE5vZGUuZGF0YSwgY3VycmVudE5vZGUucmlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIG1pblZhbHVlKG5vZGUpey8vIHJldHVybnMgdGhlIGxlYXN0IHZhbHVlIHdoZW4gYSByZW1vdmVkIG5vZGUgaGFzIGJvdGggc2lkZVxyXG4gICAgICAgIGlmKG5vZGUubGVmdCA9PT0gbnVsbCkgcmV0dXJuIG5vZGUuZGF0YTtcclxuICAgICAgICBcclxuICAgICAgICBub2RlID0gdGhpcy5taW5WYWx1ZShub2RlLmxlZnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbGV2ZWxPcmRlcigpe1xyXG4gICAgICAgIGNvbnN0IHF1ZXVlID0gW3RoaXMucm9vdF07XHJcbiAgICAgICAgY29uc3QgbGV2ZWxPcmRlckxpc3QgPSBbXTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhxdWV1ZSlcclxuICAgICAgICB3aGlsZShxdWV1ZS5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gcXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgbGV2ZWxPcmRlckxpc3QucHVzaChjdXJyZW50Tm9kZS5kYXRhKVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjdXJyZW50Tm9kZS5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVucXVldWVMaXN0ID0gW1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUubGVmdCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLnJpZ2h0XHJcbiAgICAgICAgICAgIF0uZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlbnF1ZXVlTGlzdCk7XHJcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goLi4uZW5xdWV1ZUxpc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGV2ZWxPcmRlckxpc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlT3JkZXIobm9kZSA9IHRoaXMucm9vdCl7Ly8gZGlzcGxheSBkZXB0aCAxc3RcclxuICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAke25vZGUuZGF0YX1gKTtcclxuICAgICAgICB0aGlzLnByZU9yZGVyKG5vZGUubGVmdCk7XHJcbiAgICAgICAgdGhpcy5wcmVPcmRlcihub2RlLnJpZ2h0KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaW5PcmRlcihub2RlID0gdGhpcy5yb290KXsvLyBkaXNwbGF5IGRlcHRoIDFzdFxyXG4gICAgICAgIGlmIChub2RlID09PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5pbk9yZGVyKG5vZGUubGVmdCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYCR7bm9kZS5kYXRhfWApO1xyXG4gICAgICAgIHRoaXMuaW5PcmRlcihub2RlLnJpZ2h0KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcG9zdE9yZGVyKG5vZGUgPSB0aGlzLnJvb3Qpey8vIGRpc3BsYXkgZGVwdGggMXN0XHJcbiAgICAgICAgaWYgKG5vZGUgPT09IG51bGwpIHJldHVybjtcclxuICAgICAgICB0aGlzLnBvc3RPcmRlcihub2RlLmxlZnQpO1xyXG4gICAgICAgIHRoaXMucG9zdE9yZGVyKG5vZGUucmlnaHQpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAke25vZGUuZGF0YX1gKTtcclxuICAgIH1cclxuXHJcbiAgICBzb3J0KGFycil7Ly8gcmVtb3ZlcyBkdXBlcyBhbmQgdGhlbiBzb3J0cyB0aGUgYXJyYXlcclxuICAgICAgICBjb25zdCBub0R1cGxpY2F0ZXMgPSBbLi4ubmV3IFNldChhcnIpXTtcclxuICAgICAgICBjb25zdCBzb3J0ZWRBcnJheSA9IG1lcmdlU29ydChub0R1cGxpY2F0ZXMpO1xyXG4gICAgICAgIHJldHVybiBzb3J0ZWRBcnJheTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kKGRhdGEsICBjdXJyZW50Tm9kZSA9IHRoaXMucm9vdCl7XHJcbiAgICAgICAgaWYoY3VycmVudE5vZGUgPT09IG51bGwpIHJldHVybiBjdXJyZW50Tm9kZTtcclxuICAgICAgICBpZihjdXJyZW50Tm9kZS5kYXRhID09PSBkYXRhKSByZXR1cm4gY29uc29sZS5sb2coY3VycmVudE5vZGUpO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudE5vZGUuZGF0YSA8IGRhdGEpIHsvLyBjb21wYXJpbmcgdGhlIHJlY2VpdmVkIGRhdGEgaW4gdGhlIHRyZWUgYW5kIGZpbmRpbmcgaXRzIG5vZGVcclxuICAgICAgICAgICAgY3VycmVudE5vZGUucmlnaHQgPSB0aGlzLmZpbmQoZGF0YSwgY3VycmVudE5vZGUucmlnaHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnROb2RlLmxlZnQgPSB0aGlzLmZpbmQoZGF0YSwgY3VycmVudE5vZGUubGVmdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kSGVpZ2h0KG5vZGUgPSB0aGlzLnJvb3Qpe1xyXG4gICAgICAgIGlmKG5vZGUgPT09IG51bGwpIHJldHVybiAtMTtcclxuICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5maW5kSGVpZ2h0KG5vZGUubGVmdCksdGhpcy5maW5kSGVpZ2h0KG5vZGUucmlnaHQpKSsxO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmREZXB0aChub2RlID0gdGhpcy5yb290KXtcclxuICAgIGlmIChub2RlID09PSBudWxsKSByZXR1cm4gMDtcclxuICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmZpbmREZXB0aChub2RlLmxlZnQpLCB0aGlzLmZpbmREZXB0aChub2RlLnJpZ2h0KSkrMTtcclxuICAgIH1cclxuXHJcbiAgICBpc0JhbGFuY2VkKGxlZnROb2RlID0gdGhpcy5yb290LmxlZnQsIHJpZ2h0Tm9kZSA9IHRoaXMucm9vdC5yaWdodCl7XHJcbiAgICAgICAgaWYoKHRoaXMuZmluZEhlaWdodChsZWZ0Tm9kZSkgLSB0aGlzLmZpbmRIZWlnaHQocmlnaHROb2RlKSk8PTEpIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlQmFsYW5jZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlQmFsYW5jZSgpe1xyXG4gICAgICAgIGNvbnN0IG5ld0FycmF5ID0gdGhpcy5sZXZlbE9yZGVyKCk7XHJcbiAgICAgICAgY29uc3QgbmV3U29ydGVkQXJyYXkgPSB0aGlzLnNvcnQobmV3QXJyYXkpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRUcmVlKG5ld1NvcnRlZEFycmF5KTtcclxuICAgIH1cclxuIFxyXG59XHJcblxyXG4vLyBjb25zdCByYW5kb21BcnJheSA9IChzaXplKSA9PiBBcnJheS5mcm9tKHsgbGVuZ3RoOiBzaXplIH0sICgpID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkpXHJcbi8vIGNvbnNvbGUubG9nKHJhbmRvbUFycmF5KDMwKSk7XHJcbmNvbnN0IGJpbmFyeVRyZWUgPSBuZXcgVHJlZSgpO1xyXG5jb25zdCBzb3J0ZWRBcnJheSA9IGJpbmFyeVRyZWUuc29ydChbNjgsIDM2LCA4MCwgOTAsIDM0LCA1OSwgNTAsIDIsIDcxLCA2NSwgMTgsIDIzLCA3NiwgMzgsIDY4LCA0NywgNjEsIDU3LCA2MiwgMjQsIDEsIDgzLCA0MSwgNjAsIDg5LCAyOCwgMzQsIDksIDk0LCAxOF0pO1xyXG5cclxuYmluYXJ5VHJlZS5idWlsZFRyZWUoc29ydGVkQXJyYXkpO1xyXG5iaW5hcnlUcmVlLnByZXR0eVByaW50KCk7XHJcbmJpbmFyeVRyZWUuaW5zZXJ0KDUxKTtcclxuYmluYXJ5VHJlZS5pbnNlcnQoNTIpO1xyXG5iaW5hcnlUcmVlLmluc2VydCg1Myk7XHJcbmJpbmFyeVRyZWUuaW5zZXJ0KDApO1xyXG4vLyBiaW5hcnlUcmVlLmluc2VydCg2MzUwKTtcclxuY29uc29sZS5sb2coYmluYXJ5VHJlZS5pc0JhbGFuY2VkKCkpXHJcbmJpbmFyeVRyZWUucHJldHR5UHJpbnQoKTtcclxuLy8gYmluYXJ5VHJlZS5yZW1vdmUoMjgpO1xyXG4vLyBiaW5hcnlUcmVlLmZpbmQoNjM0NilcclxuLy8gY29uc29sZS5sb2coYmluYXJ5VHJlZS5sZXZlbE9yZGVyKCkpO1xyXG4vLyBiaW5hcnlUcmVlLmluT3JkZXIodHJlZSk7XHJcbi8vIGJpbmFyeVRyZWUucG9zdE9yZGVyKCk7XHJcbmNvbnNvbGUubG9nKGJpbmFyeVRyZWUuZmluZEhlaWdodCgpKVxyXG5jb25zb2xlLmxvZyhiaW5hcnlUcmVlLmZpbmREZXB0aCgpKVxyXG5jb25zb2xlLmxvZyhiaW5hcnlUcmVlLmlzQmFsYW5jZWQoKSlcclxuLy8gYmluYXJ5VHJlZS5yZUJhbGFuY2UoKTtcclxuLy8gYmluYXJ5VHJlZS5wcmV0dHlQcmludCgpO1xyXG4vLyAiXSwibmFtZXMiOlsibWVyZ2VTb3J0Iiwic29tZUFycmF5IiwibGVuZ3RoIiwibWlkIiwiTWF0aCIsInJvdW5kIiwiZmlyc3RIYWxmIiwic2xpY2UiLCJzZWNvbmRIYWxmIiwibWVyZ2VkQXJyYXkiLCJpIiwiaiIsInB1c2giLCJtZXJnZSIsImNvbnN0cnVjdG9yIiwiZGF0YSIsInRoaXMiLCJsZWZ0IiwicmlnaHQiLCJiaW5hcnlUcmVlIiwicm9vdCIsImJ1aWxkVHJlZSIsImFyciIsInN0YXJ0IiwiZW5kIiwicGFyc2VJbnQiLCJub2RlIiwicHJldHR5UHJpbnQiLCJwcmVmaXgiLCJpc0xlZnQiLCJjb25zb2xlIiwibG9nIiwiaW5zZXJ0IiwiY3VycmVudE5vZGUiLCJyZW1vdmUiLCJtaW5WYWx1ZSIsImxldmVsT3JkZXIiLCJxdWV1ZSIsImxldmVsT3JkZXJMaXN0Iiwic2hpZnQiLCJlbnF1ZXVlTGlzdCIsImZpbHRlciIsInZhbHVlIiwicHJlT3JkZXIiLCJpbk9yZGVyIiwicG9zdE9yZGVyIiwic29ydCIsIm5vRHVwbGljYXRlcyIsIlNldCIsImZpbmQiLCJmaW5kSGVpZ2h0IiwibWF4IiwiZmluZERlcHRoIiwiaXNCYWxhbmNlZCIsImxlZnROb2RlIiwicmlnaHROb2RlIiwicmVCYWxhbmNlIiwibmV3QXJyYXkiLCJuZXdTb3J0ZWRBcnJheSIsInNvcnRlZEFycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==
(()=>{"use strict";const t=r=>{if(0===r.length)return!1;if(1===r.length)return r;const e=Math.round(r.length/2),l=r.slice(0,e),n=r.slice(e);return((t,r)=>{const e=[];let l=0,n=0;for(;l<t.length&&n<r.length;)t[l]<r[n]?e.push(t[l++]):e.push(r[n++]);for(;l<t.length;)e.push(t[l]),l+=1;for(;n<r.length;)e.push(r[n]),n+=1;return e})(t(l),t(n))},r=t,e=class{constructor(t){this.data=t,this.left=null,this.right=null}},l=new class{constructor(){this.root=null}buildTree(t,r=0,l=t.length-1){if(r>l)return null;const n=parseInt((r+l)/2,10),s=new e(t[n]);return s.left=this.buildTree(t,r,n-1),s.right=this.buildTree(t,n+1,l),this.root=s,s}prettyPrint(t=this.root,r="",e=!0){null!==t.right&&this.prettyPrint(t.right,`${r}${e?"│   ":"    "}`,!1),console.log(`${r}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&this.prettyPrint(t.left,`${r}${e?"    ":"│   "}`,!0)}insert(t,r=this.root){return null===r?new e(t):r.data!==t&&(r.data<t?r.right=this.insert(t,r.right):r.left=this.insert(t,r.left),r)}preOrder(t){null!=t&&(console.log(`${t.data}`),this.preOrder(t.left),this.preOrder(t.right))}inOrder(t){null!=t&&(this.preOrder(t.left),console.log(`${t.data}`),this.preOrder(t.right))}postOrder(t){null!=t&&(this.preOrder(t.left),this.preOrder(t.right),console.log(`${t.data}`))}sort(t){const e=[...new Set(t)];return r(e)}},n=l.sort([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]);l.buildTree(n),l.prettyPrint(),l.insert(69),l.insert(20),l.prettyPrint()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
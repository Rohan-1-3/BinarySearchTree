(()=>{"use strict";const t=r=>{if(0===r.length)return!1;if(1===r.length)return r;const e=Math.round(r.length/2),l=r.slice(0,e),i=r.slice(e);return((t,r)=>{const e=[];let l=0,i=0;for(;l<t.length&&i<r.length;)t[l]<r[i]?e.push(t[l++]):e.push(r[i++]);for(;l<t.length;)e.push(t[l]),l+=1;for(;i<r.length;)e.push(r[i]),i+=1;return e})(t(l),t(i))},r=t,e=class{constructor(t){this.data=t,this.left=null,this.right=null}},l=new class{constructor(){this.root=null}buildTree(t,r=0,l=t.length-1){if(r>l)return null;const i=parseInt((r+l)/2,10),n=new e(t[i]);return n.left=this.buildTree(t,r,i-1),n.right=this.buildTree(t,i+1,l),this.root=n,n}prettyPrint(t=this.root,r="",e=!0){null!==t.right&&this.prettyPrint(t.right,`${r}${e?"│   ":"    "}`,!1),console.log(`${r}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&this.prettyPrint(t.left,`${r}${e?"    ":"│   "}`,!0)}insert(t,r=this.root){return null===r?new e(t):r.data!==t&&(r.data<t?r.right=this.insert(t,r.right):r.left=this.insert(t,r.left),r)}remove(t,r=this.root){if(null===r)return r;if(r.data<t?r.right=this.remove(t,r.right):r.left=this.remove(t,r.left),r.data===t){if(null===r.left&&null===r.right)return null;if(null===r.left)return r.right;if(null===r.right)return r.left;r.data=this.minValue(r.right),r.right=this.remove(r.data,r.right)}return r}minValue(t){return null===t.left?t.data:t=this.minValue(t.left)}preOrder(t){null!=t&&(console.log(`${t.data}`),this.preOrder(t.left),this.preOrder(t.right))}inOrder(t){null!=t&&(this.preOrder(t.left),console.log(`${t.data}`),this.preOrder(t.right))}postOrder(t){null!=t&&(this.preOrder(t.left),this.preOrder(t.right),console.log(`${t.data}`))}sort(t){const e=[...new Set(t)];return r(e)}},i=l.sort([68,36,80,90,34,59,50,2,71,65,18,23,76,38,68,47,61,57,62,24,1,83,41,60,89,28,34,9,94,18]);l.buildTree(i),l.prettyPrint(),l.insert(69),l.remove(28),l.prettyPrint()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,